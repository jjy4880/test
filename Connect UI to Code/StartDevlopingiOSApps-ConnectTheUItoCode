
기본 UI 작성

App Store 에 앱을 제출하려면 Apple Developer Program 에 가입해야함.
- Xcode 도움말 > 작업 흐름 서명



Toolbar , Navigator Area , Editor Area , Utility Area 각 영역에 대해 익숙해야함.


실행 - Command R
시뮬레이터 종료 - Command Q


AppDelegate.swift 
    -AppDelegates class 를 정의한다. 
    -실행 루프와 엔트리 포인트를 만든다. 이 작업은 파일상단에 나타나는 Attribute() 에 의해 수행 , @UIApplicationMain
    -AppDelegate 클래스는 UIApplicationDelegate 프로토콜을 채택. 앱을 설정하고, 상태변경에 응답하고 이벤트 처리하는 여러가지 방법을 정의한다.


ViewController.swift 

    - UIViewController 를 상속. 
    - 사용자가 viewDidLoad() 에 코드를 추가하여 이벤트 응답을 처리할 수 있다.

Main.storyboard


    -View 의개념.
    -사용자 인터페이스 요소를 추가.



iOS의 모든 뷰 객체는 UIView 또는 하위계층.
View 는 화면에 표시되고 사용자 입력에 반응할 뿐만 아니라 다른 보기의 컨테이너 역할을 한다.
뷰계층 구조(상위뷰 - 하위뷰) 
ViewController - 최상위 뷰
TextField , Label , Button - 하위뷰



Interface 미리보기 - Assistant Editor -> Editor selector bar (Automatic) -> preview
하단 회전버튼(가로회전)
Assistant Editor 하단에서 시뮬레이터 기종 변경도 가능.

iPhone7 -> SE 로 변경적용햇을 경우 TextField 길이가 짤림.

기종마다 길이 폭이 다르기 때문에 AutoLayout 을 사용하여 변경되는 사양에 따라서도 알맞은 크기를 고정시켜주어야함.

레이아웃을 정의하는 가장 쉬운 방법 = UIStackView  

기존 인터페이스 요소를 UIStackView 로 래핑 한 다음 StackView를 배치하는데 필요한 조건을 적용한다.


항목 선택 -> embed In Stack (기존 레이아웃을 분석하여 가로가아니라 세로로 쌓여야함을 확인) -> Add new Constraints -> Add N Constraints



시뮬레이터에서 화면전환 
Rotate Right : Command ->
Rotate Left : Command <-




Connect To UI 
Stroyboard 한 화면은 하나의 뷰컨트롤러를 나타냄. 뷰 컨트롤러는 앱의 동작을 구현 ,앱의 데이타를 캡슐화 하는 앱데이터 모델과ㅏ 데이터를 표시하는 뷰 사이의 정보 흐름을 조정하고, 회전시 변경사항, 앱 호출 , 사용자 응답 . 

런 타임 시 스토리보드는 viewController 사용자 정의보기 컨트롤러 하위클래스의 인스턴스를 만든다.
앱의 상호작용을 정의하려면 뷰컨트롤러 소스코드가 스토리보드 보기와 통신 할 수 있어야 합니다. 


UI 용 콘센트 만들기
Outlet 은 소스코드 파일에서 인터페이스 객체를 참조 할 수 있는 방법을 제공한다.
Control 을 누른채 뷰컨트롤러파일로 드래그 한다.



//MARK: 로 시작하는 주석은 코드를 구성하고 다른사람이 읽고 쉽게 사용하는데 편리함을 주기위한 주석이다.


IBoutlet 은 InterfaceBuilder 에서 속성에 연결할 수 있음을 Xcode 에 알려준다.

weak 키워드는 약한 참조로서 참조주기를 방지하는데 도움이 된다.
Super 뷰 는 모든 하위 뷰에 강력한 참조를 유지합니다.
Super 뷰가 살아 있고 메모리에 남아있는 한 모든 하위뷰는 그대로 유지됩니다.


수행할 작업 정의.


iOS앱은 이벤트 중심 프로그래밍을 기반으로 합니다.
Action 을 통하여 사용자 , 시스템 이벤트에 응답하며 앱 흐름을 유도합니다.


버튼을 눌렀을때 레이블의 이름을 변경시켜준다. target-Action패턴의예.
행동은 특정 이벤트가 발생할 때 한 객체가 다른 객체에 메시지를 보내는 디자인 패턴입니다.



사용자 입력처리.

TextField 입력을 통해 Label 의 내용을 변경 시키기.
viewController -> UITextFieldDelegate 를 상속. ==> nameTextField.delegate = self ==> UITextFieldDelegate 프로토콜 8가지 옵션방법을 정의.(필요한것만)
